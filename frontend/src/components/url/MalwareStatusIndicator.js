import React, { useState } from 'react';
import {
  FaShieldAlt,
  FaExclamationTriangle,
  FaSkull,
  FaQuestionCircle,
  FaSpinner,
  FaSearch
} from 'react-icons/fa';
import urlService from '../../services/urlService';
import { toast } from 'react-toastify';

/**
 * MalwareStatusIndicator component for displaying URL safety status
 * 
 * @param {Object} props
 * @param {number} props.urlId - ID of the URL
 * @param {Object} props.malwareStatus - Malware status object from API
 * @param {Function} props.onStatusChange - Callback function when status changes
 */
const MalwareStatusIndicator = ({ urlId, malwareStatus, onStatusChange }) => {
  // Debug logging
  console.log('MalwareStatusIndicator props:', { urlId, malwareStatus, onStatusChange: !!onStatusChange });

  // Initialize state from props, handling potential undefined values
  const initialStatus = malwareStatus && malwareStatus.status ? malwareStatus.status : 'not_scanned';
  const initialDetails = malwareStatus && malwareStatus.details ? malwareStatus.details : '';

  const [isScanning, setIsScanning] = useState(false);
  const [status, setStatus] = useState(initialStatus);
  const [details, setDetails] = useState(initialDetails);

  // Validate urlId prop after hooks are declared
  if (!urlId || urlId === undefined || urlId === null) {
    console.warn('MalwareStatusIndicator: urlId is invalid:', urlId);
    return (
      <div className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
        <FaQuestionCircle className="mr-1 text-gray-400" />
        <span>Invalid URL</span>
      </div>
    );
  }

  const getStatusIcon = () => {
    if (isScanning) {
      return <FaSpinner className="animate-spin text-blue-500" />;
    }

    switch (status) {
      case 'clean':
        return <FaShieldAlt className="text-green-500" />;
      case 'suspicious':
        return <FaExclamationTriangle className="text-yellow-500" />;
      case 'malicious':
      case 'phishing':
      case 'spam':
        return <FaSkull className="text-red-500" />;
      case 'pending':
        return <FaSpinner className="animate-spin text-blue-500" />;
      case 'error':
        return <FaExclamationTriangle className="text-orange-500" />;
      default:
        return <FaQuestionCircle className="text-gray-400" />;
    }
  };

  const getStatusText = () => {
    switch (status) {
      case 'clean':
        return 'Safe';
      case 'suspicious':
        return 'Suspicious';
      case 'malicious':
        return 'Malicious';
      case 'phishing':
        return 'Phishing';
      case 'spam':
        return 'Spam';
      case 'pending':
        return 'Scanning...';
      case 'error':
        return 'Scan Error';
      default:
        return 'Not Scanned';
    }
  };

  const getStatusColor = () => {
    switch (status) {
      case 'clean':
        return 'bg-green-100 text-green-800';
      case 'suspicious':
        return 'bg-yellow-100 text-yellow-800';
      case 'malicious':
      case 'phishing':
      case 'spam':
        return 'bg-red-100 text-red-800';
      case 'pending':
        return 'bg-blue-100 text-blue-800';
      case 'error':
        return 'bg-orange-100 text-orange-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const handleScan = async (e) => {
    e.stopPropagation(); // Prevent event bubbling

    if (isScanning) return;

    // Check if urlId is valid before proceeding
    if (!urlId || urlId === undefined || urlId === null) {
      console.error('MalwareStatusIndicator: urlId is undefined or null:', urlId);
      toast.error('Cannot scan URL: Invalid URL ID');
      return;
    }

    setIsScanning(true);
    setStatus('pending');
    setDetails('Scanning URL for threats...');

    try {
      const response = await urlService.scanForMalware(urlId);

      if (response && response.success) {
        toast.info(response.message || 'Scan initiated successfully');

        // Poll for results after a short delay
        setTimeout(() => {
          checkScanStatus();
        }, 2000);
      } else {
        // Handle case where response exists but success is false
        setIsScanning(false);
        setStatus('error');
        setDetails(response?.message || 'Failed to initiate scan');
        toast.error(response?.message || 'Failed to scan URL for threats');
      }
    } catch (error) {
      setIsScanning(false);
      setStatus('error');

      // Extract error message if available
      let errorMessage = 'Failed to scan URL for threats';
      if (error) {
        if (error.response && error.response.data) {
          errorMessage = error.response.data.message || error.response.data.error || errorMessage;
        } else if (error.message) {
          errorMessage = error.message;
        }
      }

      setDetails(errorMessage);
      toast.error(errorMessage);
      console.error('Error scanning URL:', error);
    }
  };

  const checkScanStatus = async () => {
    // Check if urlId is valid before proceeding
    if (!urlId || urlId === undefined || urlId === null) {
      console.error('MalwareStatusIndicator: urlId is undefined or null in checkScanStatus:', urlId);
      setIsScanning(false);
      setStatus('error');
      setDetails('Invalid URL ID');
      return;
    }

    try {
      const urlData = await urlService.getUrlById(urlId);

      // Check if malware_status exists in the response
      if (urlData && urlData.malware_status) {
        const newStatus = urlData.malware_status;

        setStatus(newStatus.status || 'error');
        setDetails(newStatus.details || 'No details available');

        if (newStatus.status === 'pending') {
          // Continue polling if still pending
          setTimeout(checkScanStatus, 2000);
        } else {
          setIsScanning(false);

          // Call the onStatusChange callback if provided
          if (onStatusChange) {
            onStatusChange(urlId, newStatus);
          }
        }
      } else {
        // Handle missing malware_status in response
        setIsScanning(false);
        setStatus('error');
        setDetails('No malware status information available');
        console.warn('No malware_status in URL data:', urlData);
      }
    } catch (error) {
      setIsScanning(false);
      setStatus('error');

      // Extract error message if available
      let errorMessage = 'Failed to check scan status';
      if (error) {
        if (error.response && error.response.data) {
          errorMessage = error.response.data.message || error.response.data.error || errorMessage;
        } else if (error.message) {
          errorMessage = error.message;
        }
      }

      setDetails(errorMessage);
      console.error('Error checking scan status:', error);
    }
  };

  return (
    <div className="flex items-center space-x-2">
      <div
        className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor()}`}
        title={details}
      >
        <span className="mr-1">{getStatusIcon()}</span>
        <span>{getStatusText()}</span>
      </div>

      {status !== 'pending' && (
        <button
          onClick={handleScan}
          className={`p-1 rounded-full transition-colors duration-200 ${isScanning ? 'opacity-50 cursor-not-allowed' : 'hover:bg-gray-100'
            }`}
          disabled={isScanning}
          title="Scan for threats"
          aria-label="Scan URL for malware and phishing"
        >
          <FaSearch className="text-gray-500" />
        </button>
      )}
    </div>
  );
};

export default MalwareStatusIndicator; 