import React, { useState, useEffect, useCallback } from 'react';
import { motion } from 'framer-motion';
import { FiAlertCircle, FiShield, FiSearch, FiRefreshCw, FiBarChart2, FiPieChart, FiCalendar, FiTarget, FiClock } from 'react-icons/fi';
import { FaShieldAlt, FaExclamationTriangle, FaSkull, FaQuestionCircle, FaChartLine } from 'react-icons/fa';
import urlService from '../services/urlService';
import { toast } from 'react-hot-toast';
import { 
  PieChart, Pie, Cell, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, 
  ResponsiveContainer, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar,
  LineChart, Line, AreaChart, Area
} from 'recharts';

const MalwareDetectionPage = () => {
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [malwareResults, setMalwareResults] = useState([]);
  const [filterStatus, setFilterStatus] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [refreshing, setRefreshing] = useState(false);
  const [scanningUrl, setScanningUrl] = useState(null);

  // Define color scheme for status
  const statusColors = {
    clean: '#10B981', // green
    suspicious: '#F59E0B', // amber
    malicious: '#EF4444', // red
    phishing: '#DC2626', // red
    spam: '#F97316', // orange
    pending: '#3B82F6', // blue
    error: '#6B7280', // gray
    not_scanned: '#D1D5DB' // light gray
  };

  // Define animation variants
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0 }
  };

  // Fetch malware detection results
  const fetchMalwareResults = useCallback(async () => {
    try {
      setLoading(true);
      
      // Get malware detection results
      const data = await urlService.getMalwareResults();
      
      // Fetch associated URLs to get more context
      const urlPromises = data.map(async (result) => {
        if (result.shortened_url) {
          try {
            const urlData = await urlService.getUrlById(result.shortened_url);
            return {
              ...result,
              url_title: urlData.title || 'Untitled',
              short_code: urlData.short_code,
              original_url: urlData.original_url
            };
          } catch (err) {
            console.error(`Error fetching URL ${result.shortened_url}:`, err);
            // Still return the result even if we couldn't fetch additional data
            return {
              ...result,
              url_title: 'Unknown',
              short_code: 'Unknown',
              original_url: result.url
            };
          }
        }
        return result;
      });
      
      const enrichedResults = await Promise.all(urlPromises);
      setMalwareResults(enrichedResults);
      setError(null);
    } catch (err) {
      console.error('Error fetching malware results:', err);
      setError('Failed to load malware detection results. Please try again later.');
      toast.error('Failed to load malware detection results');
    } finally {
      setLoading(false);
      setRefreshing(false);
    }
  }, []);

  // Initial data fetch
  useEffect(() => {
    fetchMalwareResults();
  }, [fetchMalwareResults]);

  // Handle refresh
  const handleRefresh = () => {
    setRefreshing(true);
    fetchMalwareResults();
  };

  // Handle scan for a specific URL
  const handleScanUrl = async (urlId) => {
    try {
      setScanningUrl(urlId);
      const response = await urlService.scanForMalware(urlId);
      
      if (response && response.success) {
        toast.success('Scan initiated successfully');
        // Refresh the results after a short delay to allow the scan to start
        setTimeout(() => fetchMalwareResults(), 1000);
      } else if (response && response.error) {
        // Handle specific error messages
        if (response.error.includes('worker unavailable')) {
          toast.error('Scan queued but worker unavailable. Using fallback scan method.');
        } else {
          toast.error(response.error || 'Failed to scan URL');
        }
      } else {
        toast.success('Scan request sent');
      }
    } catch (err) {
      console.error('Error scanning URL:', err);
      // Handle the specific error for worker unavailable
      if (err.response?.data?.error?.includes('worker unavailable') || 
          (err.message && err.message.includes('worker unavailable'))) {
        toast.error('Scan queued but worker unavailable. Using fallback scan method.');
      } else {
        toast.error('Failed to scan URL: ' + (err.response?.data?.error || err.message || 'Unknown error'));
      }
    } finally {
      setScanningUrl(null);
      // Refresh the results after a short delay regardless of success/failure
      setTimeout(() => fetchMalwareResults(), 2000);
    }
  };

  // Format date
  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    const date = new Date(dateString);
    return date.toLocaleString();
  };

  // Get status icon
  const getStatusIcon = (status) => {
    switch (status) {
      case 'clean':
        return <FaShieldAlt className="text-green-500" />;
      case 'suspicious':
        return <FaExclamationTriangle className="text-yellow-500" />;
      case 'malicious':
      case 'phishing':
      case 'spam':
        return <FaSkull className="text-red-500" />;
      case 'pending':
        return <div className="animate-spin rounded-full h-4 w-4 border-t-2 border-b-2 border-blue-500"></div>;
      case 'error':
        return <FiAlertCircle className="text-orange-500" />;
      default:
        return <FaQuestionCircle className="text-gray-400" />;
    }
  };

  // Get status text
  const getStatusText = (status) => {
    switch (status) {
      case 'clean':
        return 'Safe';
      case 'suspicious':
        return 'Suspicious';
      case 'malicious':
        return 'Malicious';
      case 'phishing':
        return 'Phishing';
      case 'spam':
        return 'Spam';
      case 'pending':
        return 'Scanning...';
      case 'error':
        return 'Scan Error';
      default:
        return 'Not Scanned';
    }
  };

  // Get status color class
  const getStatusColorClass = (status) => {
    switch (status) {
      case 'clean':
        return 'bg-green-100 text-green-800';
      case 'suspicious':
        return 'bg-yellow-100 text-yellow-800';
      case 'malicious':
      case 'phishing':
      case 'spam':
        return 'bg-red-100 text-red-800';
      case 'pending':
        return 'bg-blue-100 text-blue-800';
      case 'error':
        return 'bg-orange-100 text-orange-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  // Filter and sort results
  const filteredResults = malwareResults
    .filter(result => {
      // Filter by status
      if (filterStatus !== 'all' && result.status !== filterStatus) {
        return false;
      }
      
      // Filter by search term
      if (searchTerm) {
        const searchLower = searchTerm.toLowerCase();
        return (
          (result.url && result.url.toLowerCase().includes(searchLower)) ||
          (result.original_url && result.original_url.toLowerCase().includes(searchLower)) ||
          (result.url_title && result.url_title.toLowerCase().includes(searchLower)) ||
          (result.short_code && result.short_code.toLowerCase().includes(searchLower))
        );
      }
      
      return true;
    })
    .sort((a, b) => new Date(b.scan_date) - new Date(a.scan_date));

  // Prepare data for visualizations
  const prepareChartData = () => {
    // Count status occurrences
    const statusCounts = malwareResults.reduce((acc, result) => {
      const status = result.status || 'not_scanned';
      acc[status] = (acc[status] || 0) + 1;
      return acc;
    }, {});
    
    // Format for pie chart
    const pieData = Object.entries(statusCounts).map(([status, count]) => ({
      name: getStatusText(status),
      value: count,
      status
    }));
    
    // Format for bar chart - confidence scores
    const confidenceData = malwareResults
      .filter(result => result.status !== 'pending' && result.status !== 'error' && result.confidence_score !== undefined)
      .map(result => ({
        url: result.url_title || result.short_code || result.url.substring(0, 30) + '...',
        confidence: parseFloat((result.confidence_score * 100).toFixed(1)),
        status: result.status
      }))
      .sort((a, b) => b.confidence - a.confidence)
      .slice(0, 10); // Top 10
      
    // Format data for radar chart - threat types
    const threatTypeCounts = {};
    malwareResults.forEach(result => {
      if (result.threat_types && typeof result.threat_types === 'object') {
        Object.keys(result.threat_types).forEach(type => {
          threatTypeCounts[type] = (threatTypeCounts[type] || 0) + 1;
        });
      }
    });
    
    const radarData = Object.entries(threatTypeCounts).map(([type, count]) => ({
      subject: type.charAt(0).toUpperCase() + type.slice(1).replace(/_/g, ' '),
      count: count,
      fullMark: malwareResults.length
    }));
    
    // Format data for timeline chart
    const timelineData = [];
    const now = new Date();
    const oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
    
    // Create a map of dates for the last 7 days
    const dateMap = {};
    for (let i = 0; i < 7; i++) {
      const date = new Date(oneWeekAgo.getTime() + i * 24 * 60 * 60 * 1000);
      const dateString = date.toISOString().split('T')[0];
      dateMap[dateString] = {
        date: dateString,
        clean: 0,
        suspicious: 0,
        malicious: 0,
        phishing: 0,
        spam: 0,
        error: 0,
        total: 0
      };
    }
    
    // Populate the date map with actual data
    malwareResults.forEach(result => {
      if (result.scan_date) {
        const scanDate = new Date(result.scan_date);
        if (scanDate >= oneWeekAgo) {
          const dateString = scanDate.toISOString().split('T')[0];
          if (dateMap[dateString]) {
            dateMap[dateString].total += 1;
            if (result.status) {
              dateMap[dateString][result.status] = (dateMap[dateString][result.status] || 0) + 1;
            }
          }
        }
      }
    });
    
    // Convert the date map to an array for the chart
    Object.values(dateMap).forEach(entry => {
      timelineData.push(entry);
    });
    
    return { pieData, confidenceData, radarData, timelineData };
  };
  
  const { pieData, confidenceData, radarData, timelineData } = prepareChartData();

  if (loading && !refreshing) {
    return (
      <div className="flex justify-center items-center h-[calc(100vh-4rem)]">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary-600"></div>
      </div>
    );
  }

  return (
    <div className="bg-gray-50 min-h-[calc(100vh-4rem)]">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <motion.div
          variants={containerVariants}
          initial="hidden"
          animate="visible"
          className="space-y-6"
        >
          <motion.div variants={itemVariants} className="flex justify-between items-center">
            <div>
              <h1 className="text-3xl font-display font-bold text-dark-900">Malware Detection</h1>
              <p className="mt-2 text-dark-500">
                Monitor and manage security scans for your URLs
              </p>
            </div>
            <button
              onClick={handleRefresh}
              disabled={refreshing}
              className="btn btn-primary flex items-center space-x-2"
            >
              <FiRefreshCw className={refreshing ? "animate-spin" : ""} />
              <span>{refreshing ? "Refreshing..." : "Refresh"}</span>
            </button>
          </motion.div>
          
          {error && (
            <motion.div 
              variants={itemVariants}
              className="bg-red-50 text-red-700 p-4 rounded-lg flex items-start"
            >
              <FiAlertCircle className="mr-2 mt-0.5 flex-shrink-0" />
              <span>{error}</span>
            </motion.div>
          )}
          
          {/* Stats and Visualizations */}
          <motion.div variants={itemVariants} className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Pie Chart */}
            <div className="bg-white rounded-xl shadow-soft p-6">
              <h2 className="text-xl font-display font-semibold text-dark-900 mb-4 flex items-center">
                <FiPieChart className="mr-2" /> Security Status Distribution
              </h2>
              <div className="h-64">
                {pieData.length > 0 ? (
                  <ResponsiveContainer width="100%" height="100%">
                    <PieChart>
                      <Pie
                        data={pieData}
                        cx="50%"
                        cy="50%"
                        labelLine={false}
                        outerRadius={80}
                        fill="#8884d8"
                        dataKey="value"
                        nameKey="name"
                        label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                      >
                        {pieData.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={statusColors[entry.status] || '#D1D5DB'} />
                        ))}
                      </Pie>
                      <Tooltip formatter={(value) => [`${value} URLs`, 'Count']} />
                      <Legend />
                    </PieChart>
                  </ResponsiveContainer>
                ) : (
                  <div className="flex items-center justify-center h-full text-gray-500">
                    No data available for visualization
                  </div>
                )}
              </div>
            </div>
            
            {/* Bar Chart */}
            <div className="bg-white rounded-xl shadow-soft p-6">
              <h2 className="text-xl font-display font-semibold text-dark-900 mb-4 flex items-center">
                <FiBarChart2 className="mr-2" /> Confidence Scores
              </h2>
              <div className="h-64">
                {confidenceData.length > 0 ? (
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart
                      data={confidenceData}
                      margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="url" tick={false} />
                      <YAxis domain={[0, 100]} />
                      <Tooltip 
                        formatter={(value, name, props) => [`${value}%`, 'Confidence']}
                        labelFormatter={(label) => `URL: ${label}`}
                      />
                      <Legend />
                      <Bar dataKey="confidence" name="Confidence Score">
                        {confidenceData.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={statusColors[entry.status] || '#D1D5DB'} />
                        ))}
                      </Bar>
                    </BarChart>
                  </ResponsiveContainer>
                ) : (
                  <div className="flex items-center justify-center h-full text-gray-500">
                    No confidence data available
                  </div>
                )}
              </div>
            </div>
            
            {/* Radar Chart - Threat Types */}
            <div className="bg-white rounded-xl shadow-soft p-6">
              <h2 className="text-xl font-display font-semibold text-dark-900 mb-4 flex items-center">
                <FiTarget className="mr-2" /> Threat Type Distribution
              </h2>
              <div className="h-64">
                {radarData.length > 0 ? (
                  <ResponsiveContainer width="100%" height="100%">
                    <RadarChart outerRadius={90} data={radarData}>
                      <PolarGrid />
                      <PolarAngleAxis dataKey="subject" />
                      <PolarRadiusAxis />
                      <Radar
                        name="Threat Count"
                        dataKey="count"
                        stroke="#ff4d4f"
                        fill="#ff4d4f"
                        fillOpacity={0.6}
                      />
                      <Tooltip formatter={(value) => [`${value} URLs`, 'Count']} />
                      <Legend />
                    </RadarChart>
                  </ResponsiveContainer>
                ) : (
                  <div className="flex items-center justify-center h-full text-gray-500">
                    No threat type data available
                  </div>
                )}
              </div>
            </div>
            
            {/* Timeline Chart */}
            <div className="bg-white rounded-xl shadow-soft p-6">
              <h2 className="text-xl font-display font-semibold text-dark-900 mb-4 flex items-center">
                <FiCalendar className="mr-2" /> Scan History (Last 7 Days)
              </h2>
              <div className="h-64">
                {timelineData.length > 0 ? (
                  <ResponsiveContainer width="100%" height="100%">
                    <AreaChart
                      data={timelineData}
                      margin={{ top: 10, right: 30, left: 0, bottom: 0 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="date" />
                      <YAxis />
                      <Tooltip />
                      <Legend />
                      <Area type="monotone" dataKey="clean" stackId="1" stroke={statusColors.clean} fill={statusColors.clean} />
                      <Area type="monotone" dataKey="suspicious" stackId="1" stroke={statusColors.suspicious} fill={statusColors.suspicious} />
                      <Area type="monotone" dataKey="malicious" stackId="1" stroke={statusColors.malicious} fill={statusColors.malicious} />
                      <Area type="monotone" dataKey="phishing" stackId="1" stroke={statusColors.phishing} fill={statusColors.phishing} />
                      <Area type="monotone" dataKey="spam" stackId="1" stroke={statusColors.spam} fill={statusColors.spam} />
                      <Area type="monotone" dataKey="error" stackId="1" stroke={statusColors.error} fill={statusColors.error} />
                    </AreaChart>
                  </ResponsiveContainer>
                ) : (
                  <div className="flex items-center justify-center h-full text-gray-500">
                    No timeline data available
                  </div>
                )}
              </div>
            </div>
          </motion.div>
          
          {/* Filters and Results */}
          <motion.div variants={itemVariants} className="bg-white rounded-xl shadow-soft p-6">
            <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-6 space-y-4 md:space-y-0">
              <h2 className="text-xl font-display font-semibold text-dark-900">Security Scan Results</h2>
              
              <div className="flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-3 w-full md:w-auto">
                {/* Filter by status */}
                <div className="relative">
                  <select
                    value={filterStatus}
                    onChange={(e) => setFilterStatus(e.target.value)}
                    className="input py-2 pr-8 pl-3"
                  >
                    <option value="all">All Statuses</option>
                    <option value="clean">Clean</option>
                    <option value="suspicious">Suspicious</option>
                    <option value="malicious">Malicious</option>
                    <option value="phishing">Phishing</option>
                    <option value="spam">Spam</option>
                    <option value="pending">Pending</option>
                    <option value="error">Error</option>
                  </select>
                </div>
                
                {/* Search box */}
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <FiSearch className="text-dark-400" />
                  </div>
                  <input
                    type="text"
                    placeholder="Search URLs..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="input pl-10"
                  />
                </div>
              </div>
            </div>
            
            {filteredResults.length === 0 ? (
              <div className="text-center py-10">
                <FiShield className="mx-auto h-12 w-12 text-dark-300" />
                <h3 className="mt-4 text-lg font-medium text-dark-900">No scan results found</h3>
                <p className="mt-1 text-dark-500">
                  {searchTerm || filterStatus !== 'all' 
                    ? 'Try changing your filters or search term' 
                    : 'Scan your URLs for malware and phishing threats'}
                </p>
              </div>
            ) : (
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-dark-500 uppercase tracking-wider">
                        Status
                      </th>
                      <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-dark-500 uppercase tracking-wider">
                        URL
                      </th>
                      <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-dark-500 uppercase tracking-wider">
                        Title/Code
                      </th>
                      <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-dark-500 uppercase tracking-wider">
                        Details
                      </th>
                      <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-dark-500 uppercase tracking-wider">
                        Confidence
                      </th>
                      <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-dark-500 uppercase tracking-wider">
                        Scan Date
                      </th>
                      <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-dark-500 uppercase tracking-wider">
                        Actions
                      </th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {filteredResults.map((result) => (
                      <tr key={result.id} className="hover:bg-gray-50">
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColorClass(result.status)}`}>
                            <span className="mr-1">{getStatusIcon(result.status)}</span>
                            <span>{getStatusText(result.status)}</span>
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="max-w-xs truncate text-sm text-dark-500">
                            <a 
                              href={result.original_url || result.url} 
                              target="_blank" 
                              rel="noopener noreferrer"
                              className="hover:text-primary-600"
                            >
                              {result.original_url || result.url}
                            </a>
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-dark-500">
                          {result.url_title || result.short_code || '—'}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="max-w-xs truncate text-sm text-dark-500" title={result.details}>
                            {result.details || '—'}
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-dark-500">
                          {result.confidence_score !== undefined && result.status !== 'pending' ? 
                            `${(result.confidence_score * 100).toFixed(1)}%` : 
                            '—'
                          }
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-dark-500">
                          {formatDate(result.scan_date)}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-dark-500">
                          <button
                            onClick={() => handleScanUrl(result.shortened_url)}
                            disabled={scanningUrl === result.shortened_url || result.status === 'pending'}
                            className="text-primary-600 hover:text-primary-800 disabled:text-gray-400 disabled:cursor-not-allowed"
                            title="Rescan URL"
                          >
                            {scanningUrl === result.shortened_url ? (
                              <FiClock className="animate-spin h-5 w-5" />
                            ) : (
                              <FiRefreshCw className="h-5 w-5" />
                            )}
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            )}
          </motion.div>
        </motion.div>
      </div>
    </div>
  );
};

export default MalwareDetectionPage; 